import { createOutgoingHttpHeaders } from "./createOutgoingHttpHeaders.js";
function nodeMiddleware_default(app, mode) {
  return async function(...args) {
    let error = null;
    let locals;
    let [req, res, next] = args;
    if (mode === "middleware") {
      let { [3]: _locals } = args;
      locals = _locals;
    }
    if (args[0] instanceof Error) {
      [error, req, res, next] = args;
      if (mode === "middleware") {
        let { [4]: _locals } = args;
        locals = _locals;
      }
      if (error) {
        if (next) {
          return next(error);
        } else {
          throw error;
        }
      }
    }
    const logger = app.getAdapterLogger();
    try {
      const routeData = app.match(req);
      if (routeData) {
        try {
          const response = await app.render(req, { routeData, locals });
          await writeWebResponse(app, res, response, logger);
        } catch (err) {
          if (next) {
            next(err);
          } else {
            throw err;
          }
        }
      } else if (next) {
        return next();
      } else {
        const response = await app.render(req);
        await writeWebResponse(app, res, response, logger);
      }
    } catch (err) {
      logger.error(`Could not render ${req.url}`);
      console.error(err);
      if (!res.headersSent) {
        res.writeHead(500, `Server error`);
        res.end();
      }
    }
  };
}
async function writeWebResponse(app, res, webResponse, logger) {
  const { status, headers, body } = webResponse;
  if (app.setCookieHeaders) {
    const setCookieHeaders = Array.from(app.setCookieHeaders(webResponse));
    if (setCookieHeaders.length) {
      for (const setCookieHeader of setCookieHeaders) {
        headers.append("set-cookie", setCookieHeader);
      }
    }
  }
  const nodeHeaders = createOutgoingHttpHeaders(headers);
  res.writeHead(status, nodeHeaders);
  if (body) {
    try {
      const reader = body.getReader();
      res.on("close", () => {
        reader.cancel().catch((err) => {
          logger.error(
            `There was an uncaught error in the middle of the stream while rendering ${res.req.url}.`
          );
          console.error(err);
        });
      });
      let result = await reader.read();
      while (!result.done) {
        res.write(result.value);
        result = await reader.read();
      }
    } catch {
      res.write("Internal server error");
    }
  }
  res.end();
}
export {
  nodeMiddleware_default as default
};
